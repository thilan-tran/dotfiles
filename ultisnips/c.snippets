snippet def "#define" bA
#define $1
endsnippet

snippet if "if-statement" bA
if (${1:/* condition */})
{
	${VISUAL}$0
}
endsnippet

snippet elif "else-if-statement" bA
else if (${1:/* condition */})
{
	${VISUAL}$0
}
endsnippet

snippet el "else-statement" bA
else
{
	${VISUAL}$0
}
endsnippet

snippet tern "ternary" A
${1:/* condition */} ? ${2:a} : ${3:b}
endsnippet

snippet switch "switch-case" bA
switch (${1:/* variable */})
{
		case ${2:/* variable case */}:
			${3}
			${4:break;}${5}
		default:
			${6}
}
endsnippet

snippet for "for loop" bA
for (int ${2:k} = 0; $2 < ${1:count}; ${3:$2++})
{
	${VISUAL}$0
}
endsnippet

snippet whi "while" bA
while (${1:/* condition */})
{
	${VISUAL}$0
}
endsnippet

snippet dow "do-while" bA
do
{
	${VISUAL}$0
} while (${1:/* condition */});
endsnippet

snippet struct "struct" bA
struct ${1:/* name */}
{
	$0
};
endsnippet

snippet funct "function" bA
${3:/* type */} ${1:/* name */}($2)
{
	${VISUAL}$0
}
endsnippet

snippet cFunct "class-function" bA
${4:/* type */} ${1:`!p snip.rv = snip.basename or "/* class */"`}::${2:/* name */}($3)
{
	${VISUAL}$0
}
endsnippet	

snippet tem "template"
template <typename ${1:ItemType}>
$0
endsnippet

global !p
def get_args(arglist):
	args = [arg.strip() for arg in arglist.split(',') if arg]
	return args
endglobal

snippet doxFile "doxygen-file" bA
/**
 * @file ${1:name}
 *
 * @brief ${2:descrip.}
 * 
 * $5
 */
$0
endsnippet

snippet doxFunct "doxygen-function" bA
/**
 * @brief ${4:brief}
 *
 * ${5:descrip.}
 * `!p
snip.rv = ""
snip >> 2

args = get_args(t[2])
if args:
	for arg in args:
		snip.rv += '\n' + ' * @param ' + arg + ' - description'
snip << 2
`
 * @return $6
 */
${1}($2)
{
	${0}
}
endsnippet